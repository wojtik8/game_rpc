//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
RemoteException = module.exports.RemoteException = function(args) {
  Thrift.TException.call(this, "RemoteException")
  this.name = "RemoteException"
  this.what = null;
  this.why = null;
  if (args) {
    if (args.what !== undefined) {
      this.what = args.what;
    }
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(RemoteException, Thrift.TException);
RemoteException.prototype.name = 'RemoteException';
RemoteException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RemoteException.prototype.write = function(output) {
  output.writeStructBegin('RemoteException');
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

